/*
 * This file is generated by jOOQ.
 */
package serol.jooqtry.database.jooq.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import serol.jooqtry.database.jooq.Indexes;
import serol.jooqtry.database.jooq.Jooqtry;
import serol.jooqtry.database.jooq.Keys;
import serol.jooqtry.database.jooq.tables.records.BlogsRecord;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Blogs extends TableImpl<BlogsRecord> {

    private static final long serialVersionUID = -53196019;

    /**
     * The reference instance of <code>jooqtry.blogs</code>
     */
    public static final Blogs BLOGS = new Blogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlogsRecord> getRecordType() {
        return BlogsRecord.class;
    }

    /**
     * The column <code>jooqtry.blogs.id</code>.
     */
    public final TableField<BlogsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('jooqtry.blogs_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jooqtry.blogs.author</code>.
     */
    public final TableField<BlogsRecord, String> AUTHOR = createField(DSL.name("author"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>jooqtry.blogs.date_published</code>.
     */
    public final TableField<BlogsRecord, Timestamp> DATE_PUBLISHED = createField(DSL.name("date_published"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>jooqtry.blogs.date_edited</code>.
     */
    public final TableField<BlogsRecord, Timestamp> DATE_EDITED = createField(DSL.name("date_edited"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>jooqtry.blogs.text</code>.
     */
    public final TableField<BlogsRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>jooqtry.blogs</code> table reference
     */
    public Blogs() {
        this(DSL.name("blogs"), null);
    }

    /**
     * Create an aliased <code>jooqtry.blogs</code> table reference
     */
    public Blogs(String alias) {
        this(DSL.name(alias), BLOGS);
    }

    /**
     * Create an aliased <code>jooqtry.blogs</code> table reference
     */
    public Blogs(Name alias) {
        this(alias, BLOGS);
    }

    private Blogs(Name alias, Table<BlogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Blogs(Name alias, Table<BlogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Blogs(Table<O> child, ForeignKey<O, BlogsRecord> key) {
        super(child, key, BLOGS);
    }

    @Override
    public Schema getSchema() {
        return Jooqtry.JOOQTRY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BLOGS_PKEY);
    }

    @Override
    public Identity<BlogsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BLOGS;
    }

    @Override
    public UniqueKey<BlogsRecord> getPrimaryKey() {
        return Keys.BLOGS_PKEY;
    }

    @Override
    public List<UniqueKey<BlogsRecord>> getKeys() {
        return Arrays.<UniqueKey<BlogsRecord>>asList(Keys.BLOGS_PKEY);
    }

    @Override
    public Blogs as(String alias) {
        return new Blogs(DSL.name(alias), this);
    }

    @Override
    public Blogs as(Name alias) {
        return new Blogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Blogs rename(String name) {
        return new Blogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Blogs rename(Name name) {
        return new Blogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, Timestamp, Timestamp, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
